#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import os
import sys

from commands import harty_practice

import harty_config
from commands import harty_setup
from commands import harty_status
from commands import harty_list

CONF_NAME = "harty.conf"
sysdir = os.path.dirname(os.path.realpath(__file__))


if not harty_config.check_config_exists():
    print('No config file found, generating default to "harty.conf"')
    print('Generating SQLite database to "harty_data.sqlite"')
    print('You can update settings later by editing the configuration file')
    print('To reset the configuration file, delete the current and a new will be generated')

    print('')
    print('You can now run harty by running it again')
    harty_config.generate_default_config()
    sys.exit(0)

if len(sys.argv) == 1:
    harty_practice.main()
    sys.exit(0)


def parse_arguments():

    def default_func(args):
        print("Must specify tool (harty <tool>)"
              "\nIf it is the first time you run Harsh Typing Trainer, "
              "it is recommended to run the 'harty setup' command to set up a "
              "config file and to initialize the SQLite database.")
        parser.print_help()

        exit(1)

    parser = argparse.ArgumentParser()
    parser.set_defaults(func=default_func)

    subparsers = parser.add_subparsers()

    parse_setup(subparsers)
    parse_practice(subparsers)
    parse_test(subparsers)
    parse_status(subparsers)
    parse_list(subparsers)

    args = parser.parse_args()
    args.func(args)


def verify_files_setup(args):

    conf_exists = harty_config.check_config_exists()
    conf_path = harty_config.get_config_path()

    if not conf_exists:
        print("Config file not found in: {}".format(conf_path))
        print("You need to set this up, either manually or by running the command './harty setup'")
        sys.exit(1)

    expected_field_not_present = harty_config.get_expected_field_not_present()

    if len(expected_field_not_present) > 0:
        print("Configuration file lacks following required fields")
        for field in expected_field_not_present:
            print("Category: {} Value: {}".format(field[0], field[1]))
        sys.exit(1)

    # -> Check config file is valid - Containing required fields
    # -> Check that the database is set up - That the file actually exists

    return False


def parse_setup(subparsers_object):

    """Setup command"""

    def harty_setup_func(args):

        print("in setup")
        harty_setup.main(args)

    subparser = subparsers_object.add_parser('setup')
    subparser.set_defaults(func=harty_setup_func, which='setup')

    subparser.add_argument('--dry_run', action='store_true')
    subparser.add_argument('--database_test', action='store_true')


def parse_practice(subparsers_object):

    def harty_practice_func(args):
        verify_files_setup(args)
        harty_practice.main(args)

    subparser = subparsers_object.add_parser('practice')
    subparser.set_defaults(func=harty_practice_func, which='practice')

    subparser.add_argument('practice_type', choices=['training', 'test'], default='training', nargs='?')
    subparser.add_argument('--auto_return', action='store_true')
    subparser.add_argument('--description', help='Extra information about the run', default='no description')
    subparser.add_argument('--source', help='Text source for practice')


def parse_test(subparsers_object):

    def harty_test_func(args):
        verify_files_setup(args)
        harty_practice.test_main(args)

    subparser = subparsers_object.add_parser('test')
    subparser.set_defaults(func=harty_test_func, which='test')


def parse_status(subparsers_object):

    def harty_status_func(args):
        verify_files_setup(args)
        harty_status.main(args)

    subparser = subparsers_object.add_parser('status')
    subparser.set_defaults(func=harty_status_func, which='status')

    subparser.add_argument('--terminal', help='Information adjusted for terminal integration', action='store_true')


def parse_list(subparsers_object):

    def harty_list_func(args):
        verify_files_setup(args)
        harty_list.main(args)

    subparser = subparsers_object.add_parser('list')
    subparser.set_defaults(func=harty_list_func, which='list')
    subparser.add_argument('--highscore', choices=['day', 'week', 'month', 'year', 'all'])


if __name__ == '__main__':
    parse_arguments()
